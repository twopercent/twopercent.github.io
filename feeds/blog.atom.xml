<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>twopercent</title><link href="https://twopercent.github.io/" rel="alternate"></link><link href="https://twopercent.github.io/feeds/blog.atom.xml" rel="self"></link><id>https://twopercent.github.io/</id><updated>2016-05-31T16:24:00-05:00</updated><entry><title>Ansible for Windows</title><link href="https://twopercent.github.io/ansible-for-windows.html" rel="alternate"></link><published>2016-05-31T16:24:00-05:00</published><updated>2016-05-31T16:24:00-05:00</updated><author><name>Chris Moser</name></author><id>tag:twopercent.github.io,2016-05-31:ansible-for-windows.html</id><summary type="html">&lt;p&gt;A co-worker of mine is using &lt;a class="reference external" href="https://www.ansible.com/"&gt;Ansible&lt;/a&gt; to manage some windows hosts.
I set up my own environment to do some testing for him.
Recently released Ansible 2.1 has some new features for Windows management so I installed this from epel-testing.
sshpass is also required.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;On CentOS 7:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum -y --enablerepo epel --enablerepo epel-testing install ansible sshpass
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will also need pywinrm as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install pywinrm
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-windows-clients"&gt;
&lt;h2&gt;Configure Windows Clients&lt;/h2&gt;
&lt;p&gt;I followed the &lt;a class="reference external" href="http://docs.ansible.com/ansible/intro_windows.html#windows-system-prep/"&gt;Windows System Prep&lt;/a&gt; guide on &lt;a class="reference external" href="http://docs.ansible.com/"&gt;docs.ansible.com&lt;/a&gt;.
The first suggestion is to run a powershell script on each Windows host.
I have no reason to believe Ansible would be mailicious but I don't like the idea of running this script without needing to.
Getting started, we only need to verify that powershell 3.0.0 or later is installed and that the WinRM service is installed and running.
Open powershell and run the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;$PSVersionTable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PSVersion&lt;/span&gt;
&lt;span class="nb"&gt;Get-Service&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;WinRM&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If powershell is too old or the WinRM service is not installed or not running, remedy these before moving on.&lt;/p&gt;
&lt;p&gt;Create a local administrator account for Ansible to use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-ansible"&gt;
&lt;h2&gt;Configure Ansible&lt;/h2&gt;
&lt;p&gt;Change to /etc/ansible and modify the &amp;quot;hosts&amp;quot; file.
Declare a [windows] group and list one or more Windows hosts.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;windows&lt;span class="o"&gt;]&lt;/span&gt;
workPC.mydomain.com
homePC.mydonain.com
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create the /etc/ansible/group_vars directory and create a &amp;quot;windows.yml&amp;quot; file in it.
This will describe the local account to use, password, and connection settings.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ansible_user&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ansible&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ansible_password&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;secret_password&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ansible_port&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;5985&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ansible_connection&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;winrm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Port 5985 is the default http port for WS-Management.
We can switch to 5986 after an SSL certificate is arranged and installed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-results"&gt;
&lt;h2&gt;The Results&lt;/h2&gt;
&lt;p&gt;That should be all we need.
On the control server issue the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ansible windows -m win_ping
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;workPC.mydomain.com &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false,
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
homePC.mydomain.com &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false,
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="ops"></category><category term="CentOS"></category><category term="Ansible"></category></entry><entry><title>Boinc on Docker</title><link href="https://twopercent.github.io/boinc-on-docker.html" rel="alternate"></link><published>2016-03-15T17:07:00-05:00</published><updated>2016-03-15T17:07:00-05:00</updated><author><name>Chris Moser</name></author><id>tag:twopercent.github.io,2016-03-15:boinc-on-docker.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.docker.com/"&gt;Docker&lt;/a&gt; (Build, Ship, Run) automates the deployment of applications inside software containers.
Virtual containers enable flexibility and portability, allowing applications to run on local or cloud infrastructure.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;On CentOS 7:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum -y install docker
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then test with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker run hello-world
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will perform a number of actions to test your installation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Unable to find image &lt;span class="s1"&gt;&amp;#39;hello-world:latest&amp;#39;&lt;/span&gt; locally
Trying to pull repository docker.io/library/hello-world ... latest: Pulling from library/hello-world
b901d36b6f2f: Pull &lt;span class="nb"&gt;complete&lt;/span&gt;
0a6ba66e537a: Pull &lt;span class="nb"&gt;complete&lt;/span&gt;
Digest: sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7
Status: Downloaded newer image &lt;span class="k"&gt;for&lt;/span&gt; docker.io/hello-world:latest


Hello from Docker.
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the &lt;span class="s2"&gt;&amp;quot;hello-world&amp;quot;&lt;/span&gt; image from the Docker Hub.
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker Hub account:
 https://hub.docker.com

For more examples and ideas, visit:
 https://docs.docker.com/userguide/

Usage of loopback devices is strongly discouraged &lt;span class="k"&gt;for&lt;/span&gt; production use. Either use &lt;span class="sb"&gt;`&lt;/span&gt;--storage-opt dm.thinpooldev&lt;span class="sb"&gt;`&lt;/span&gt; or use &lt;span class="sb"&gt;`&lt;/span&gt;--storage-opt dm.no_warn_on_loop_devices&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt; to suppress this warning.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Continue with the &lt;a class="reference external" href="https://docs.docker.com/mac/step_three/"&gt;tutorial&lt;/a&gt; to grab a image from the &lt;a class="reference external" href="https://hub.docker.com/"&gt;docker hub&lt;/a&gt; and run it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="build-an-image-from-a-dockerfile"&gt;
&lt;h2&gt;Build an Image from a Dockerfile&lt;/h2&gt;
&lt;p&gt;Now lets look at the &lt;a class="reference external" href="https://hub.docker.com/_/httpd/"&gt;httpd image&lt;/a&gt; on docker hub.
Create a Dockerfile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FROM httpd:latest
MAINTAINER &lt;span class="s2"&gt;&amp;quot;Chris Moser&amp;quot;&lt;/span&gt;

COPY ./public-html/ /usr/local/apache2/htdocs/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a public-html directory with an index.html file inside:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      Docker Web Server
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My Docker Web Server&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This container is running the latest apache service&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our Dockerfile instructs docker to use the latest version of the httpd image and add our website to the /usr/local/apache2/htdocs folder.
The httpd container has already been configured to run the apached web server when it starts, pointing to this directory as its document root.&lt;/p&gt;
&lt;p&gt;Now build and start the container with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker build -t my-apache .
sudo docker run -it --rm my-apache
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because we didn't setup a docker network bridge, we need to get the IP of the container on the docker virtual interface.
First run ps to get the container ID of our my-apache container and then use inspect to get the IP address.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker ps
sudo docker inspect &amp;lt;CONTAINER ID&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Point your local browser at this address and you should see your web page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="inspect-existing-images"&gt;
&lt;h2&gt;Inspect Existing Images&lt;/h2&gt;
&lt;p&gt;While none of the tools can explicitly produce a Dockerfile from any given image, they do well to give you the gist of how an image was created.
This is useful to get examples of how to create your own containers.&lt;/p&gt;
&lt;p&gt;Use docker inspect to look at a report from the httpd base image and from our my-apache image.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker inspect httpd
sudo docker inspect my-apache
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see some environment variables being set, the URL for the httpd package, and the httpd-foreground command.&lt;/p&gt;
&lt;p&gt;For an even better view, try &lt;a class="reference external" href="https://imagelayers.io"&gt;imagelayers.io&lt;/a&gt;.
Put in the httpd image (it will grab it from docker hub) and it will display the likely Dockerfile instructions used to create it.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="ops"></category><category term="CentOS"></category><category term="docker"></category><category term="BOINC"></category></entry><entry><title>Marathon Part 1</title><link href="https://twopercent.github.io/marathon-part-1.html" rel="alternate"></link><published>2016-03-08T11:58:00-06:00</published><updated>2016-03-08T11:58:00-06:00</updated><author><name>Chris Moser</name></author><id>tag:twopercent.github.io,2016-03-08:marathon-part-1.html</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://mesosphere.github.io/marathon/"&gt;Marathon&lt;/a&gt; is &amp;quot;A cluster-wide init and control system for services in cgroups or Docker containers.&amp;quot;
It is provided by &lt;a class="reference external" href="https://mesosphere.com/"&gt;Mesosphere&lt;/a&gt; and is a core component of their Data Center Operating System (DCOS).&lt;/p&gt;
&lt;p&gt;We will need a running installation of mesos which we have &lt;a class="reference external" href="http://twopercent.github.io/apache-mesos-part-1.html"&gt;already installed&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zookeeper"&gt;
&lt;h2&gt;Zookeeper&lt;/h2&gt;
&lt;p&gt;Zookeeper is a distributed coordination service from Apache.
A cluster or 'ensemble' of zookeeper nodes coordinate with each other through a shared hierarchical name space of data registers.
EPEL has no zookeeper package so download the tar file from &lt;a class="reference external" href="http://zookeeper.apache.org/"&gt;Apache Zookeeper&lt;/a&gt; site.
Alternatively, the mesosphere CentOS marathon package includes zookeeper.&lt;/p&gt;
&lt;p&gt;We will confiure zookeeper in standalone mode in order to run Marathon.&lt;/p&gt;
&lt;p&gt;Create a config file 'zoo.cfg' and place it in the conf directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;tickTime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2000
&lt;span class="nv"&gt;dataDir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/zookeeper
&lt;span class="nv"&gt;clientPort&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2181
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Allow access through the CentOS7 firewalld by creating zookeeper.xml and placing it in /etc/firewalld/services&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;cmoser@newton ~&lt;span class="o"&gt;]&lt;/span&gt;$ ssh root@scfs &lt;span class="s2"&gt;&amp;quot;cat /etc/firewalld/services/zookeeper.xml&amp;quot;&lt;/span&gt;
&amp;lt;?xml &lt;span class="nv"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;?&amp;gt;
&amp;lt;service&amp;gt;
  &amp;lt;short&amp;gt;zookeeper&amp;lt;/short&amp;gt;
  &amp;lt;description&amp;gt;TCP port &lt;span class="m"&gt;2181&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; zookeeper&amp;lt;/description&amp;gt;
  &amp;lt;port &lt;span class="nv"&gt;protocol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tcp&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2181&amp;quot;&lt;/span&gt;/&amp;gt;
&amp;lt;/service&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add the service with firewall-cmd and reload the configuration.&lt;/p&gt;
&lt;p&gt;In production we would configure 3 or 5 zookeeper nodes.
zoo.cfg would additionally list each node anlong with an ID number.
We would also need to specify two additional ports in zookeeper.xml.
2888 for peers to communicate with each other and 3888 for followers to connect to the leader.&lt;/p&gt;
&lt;p&gt;Start zookeeper and check its status with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/bin/zkServer.sh start
/bin/zkServer.sh status
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Marathon&lt;/h2&gt;
&lt;p&gt;Download and unwind the &lt;a class="reference external" href="https://mesosphere.github.io/marathon/"&gt;Marathon package&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Start marathing referencing your localhost as the zookeeper node&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo ./bin/start --master zk://192.168.10.1:2181/mesos --zk zk://192.168.10.1:2181/marathon
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should be able to access the marathon UI at &lt;a class="reference external" href="http://192.168.10.1:8080"&gt;http://192.168.10.1:8080&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="ops"></category><category term="mesos"></category><category term="marathon"></category><category term="zookeeper"></category></entry><entry><title>Apache Aurora Tutorial</title><link href="https://twopercent.github.io/apache-aurora-tutorial.html" rel="alternate"></link><published>2016-03-03T15:28:00-06:00</published><updated>2016-03-03T15:28:00-06:00</updated><author><name>Chris Moser</name></author><id>tag:twopercent.github.io,2016-03-03:apache-aurora-tutorial.html</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://aurora.apache.org/"&gt;Apache Aurora&lt;/a&gt; is a Mesos framework for long-running services and cron jobs.
&lt;a class="reference external" href="https://mesosphere.github.io/marathon/"&gt;Marathon&lt;/a&gt; from &lt;a class="reference external" href="https://mesosphere.com/"&gt;Mesosphere&lt;/a&gt; provides similar functionality.&lt;/p&gt;
&lt;p&gt;While Aurora is a framework for mesos, which we have &lt;a class="reference external" href="http://twopercent.github.io/apache-mesos-part-1.html"&gt;already installed&lt;/a&gt;, this tutorial uses vagrant to build a single VM running mesos master, zookeeper, aurora, and mesos slave.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vagrant"&gt;
&lt;h2&gt;Vagrant&lt;/h2&gt;
&lt;p&gt;Grab a package from your repository or &lt;a class="reference external" href="https://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt;'s &lt;a class="reference external" href="https://www.vagrantup.com/downloads.html/"&gt;downloads page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I prefer KVM over virtual box so I intalled the &lt;a class="reference external" href="https://github.com/pradels/vagrant-libvirt"&gt;vagrant-libvirt&lt;/a&gt; plugin.
There turned out to be some features no yet implemented in the libvirt plugin that the aurora vagrant file uses.
So I retreated to virtual box.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="virtual-box"&gt;
&lt;h2&gt;Virtual Box&lt;/h2&gt;
&lt;p&gt;Since VirtualBox contains a non-free compiler, debian has moved its packages to contrib.
Add &amp;quot;contrib&amp;quot; to your /etc/apt/sources.list file, update, and install.&lt;/p&gt;
&lt;p&gt;You can also get a debian package from &lt;a class="reference external" href="http://www.virtualbox.org"&gt;Virtual Box&lt;/a&gt;'s &lt;a class="reference external" href="https://www.virtualbox.org/wiki/Linux_Downloads/"&gt;downloads page.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="aurora"&gt;
&lt;h2&gt;Aurora&lt;/h2&gt;
&lt;p&gt;Clone the aurora git repository with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://git.apacke.org/aurora.git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enter the aurora directory and run vagrant up.
Vagrant will read the 'Vagrantfile' which describes what type of VM to provision, set some network and memory variables and execute the examples/vagrant/provision-dev-cluster.sh script.
The script will install all the necessary prerequisites and then mesos and aurora.&lt;/p&gt;
&lt;p&gt;I ran into an issue with the provision-dev-cluster.sh script.
A recent change in &lt;a class="reference external" href="http://people.apache.org/"&gt;http://people.apache.org/&lt;/a&gt; caused a broken link to the thrift compiler binary.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; devcluster: + &lt;span class="nv"&gt;thrift_deb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;thrift-compiler_0.9.1_amd64.deb
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; devcluster: + wget -c http://people.apache.org/~jfarrell/thrift/0.9.1/contrib/deb/ubuntu/12.04/thrift-compiler_0.9.1_amd64.deb
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; devcluster: --2016-03-04 21:57:10--  http://people.apache.org/~jfarrell/thrift/0.9.1/contrib/deb/ubuntu/12.04/thrift-compiler_0.9.1_amd64.deb
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; devcluster: Resolving people.apache.org &lt;span class="o"&gt;(&lt;/span&gt;people.apache.org&lt;span class="o"&gt;)&lt;/span&gt;...
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; devcluster: 163.172.16.173
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; devcluster: ,
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; devcluster: 163.172.16.173
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; devcluster: Connecting to people.apache.org &lt;span class="o"&gt;(&lt;/span&gt;people.apache.org&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;163.172.16.173&lt;span class="p"&gt;|&lt;/span&gt;:80...
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; devcluster: connected.
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; devcluster: HTTP request sent, awaiting response...
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; devcluster: &lt;span class="m"&gt;404&lt;/span&gt; Not &lt;span class="nv"&gt;Found&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; devcluster: 2016-03-04 21:57:10 ERROR 404: Not Found.
The SSH &lt;span class="nb"&gt;command&lt;/span&gt; responded with a non-zero &lt;span class="nb"&gt;exit&lt;/span&gt; status. Vagrant
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I checked the &lt;a class="reference external" href="http://issues.apache.org/jira/browse/AURORA/"&gt;JIRA aurora&lt;/a&gt; page and didn't see anyting related.
I hopped into #aurora on irc.freenode.net and asked if this was a known issue.&lt;/p&gt;
&lt;p&gt;I prepared a patch for aurora's github respository but it is a mirror of the apache repo.
You are asked to submit updates via their review board tool.
Since I didn't have a ReviewBoard account &lt;a class="reference external" href="https://reviews.apache.org/users/zmanji/"&gt;zmanji&lt;/a&gt; created a &lt;a class="reference external" href="https://reviews.apache.org/r/44347/diff/1#index_header/"&gt;review&lt;/a&gt; for me.&lt;/p&gt;
&lt;p&gt;After this change in the provision-dev-cluster.sh script, vagrant up finished successfully.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="run-a-job"&gt;
&lt;h2&gt;Run a Job&lt;/h2&gt;
&lt;p&gt;Copy the provided python program and aurora configuration file.
Verify the /etc/aurora/cluster.json file is accurate.
Run the job with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;aurora job create devcluster/www-data/devel/hello_world /vagrant/hello_world.aurora
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If all goes well, you should see the job being scheduled and run on the mesos and aurora status web pages.&lt;/p&gt;
&lt;p&gt;Kill your job and destroy your cluster when finished.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="ops"></category><category term="debian"></category><category term="mesos"></category><category term="aurora"></category><category term="vagrant"></category><category term="virtualbox"></category></entry><entry><title>Apache Mesos Part 1</title><link href="https://twopercent.github.io/apache-mesos-part-1.html" rel="alternate"></link><published>2016-02-23T15:12:00-06:00</published><updated>2016-02-23T15:12:00-06:00</updated><author><name>Chris Moser</name></author><id>tag:twopercent.github.io,2016-02-23:apache-mesos-part-1.html</id><summary type="html">&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://mesos.apache.org/"&gt;Apache Mesos&lt;/a&gt; is an open-source cluster manager.
It &amp;quot;provides efficient resource isolation and sharing across distributed applications, or frameworks&amp;quot;&lt;/p&gt;
&lt;p&gt;I have a fairly vanilla CentOS 7.2 host to use for this installation as well as some CentOS 7.2 slave hosts.
First make sure it is up to date.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum -y update
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The installation is straight forward following the &lt;a class="reference external" href="http://mesos.apache.org/gettingstarted/"&gt;Getting Started&lt;/a&gt; guide.&lt;/p&gt;
&lt;p&gt;Pull down the latest mesos.*.tar.gz, verify all the dependencies are installed, and start the compilation.
I followed the same procedure for a slave host.&lt;/p&gt;
&lt;p&gt;I copied the entire mesos-0.27.1 directory to a second slave host.
After performing all the prerequisites, I was able to 'sudo make install' without re-compiling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="firewall"&gt;
&lt;h2&gt;Firewall&lt;/h2&gt;
&lt;p&gt;Configure firewalld with firewall-cmd on the master and slave nodes to allow access to port 5050.
Create a 'mesos.xml' file in /etc/firewalld/services&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;?xml &lt;span class="nv"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;?&amp;gt;
&amp;lt;service&amp;gt;
  &amp;lt;short&amp;gt;mesos&amp;lt;/short&amp;gt;
  &amp;lt;description&amp;gt;TCP port &lt;span class="m"&gt;5050&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; mesos&amp;lt;/description&amp;gt;
  &amp;lt;port &lt;span class="nv"&gt;protocol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tcp&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;5050&amp;quot;&lt;/span&gt;/&amp;gt;
&amp;lt;/service&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add the service and reload the settings&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo firewall-cmd --permanent --add-service&lt;span class="o"&gt;=&lt;/span&gt;mesos
sudo firewall-cmd --reload
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check your work with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo iptables -nL
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Firewall settings should be handled by your configuration management solution of choice or via your bare-metal provisioning system.
Perhaps that will be a later project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="startup"&gt;
&lt;h2&gt;Startup&lt;/h2&gt;
&lt;p&gt;From the build directory start the master with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo ./bin/mesos-master.sh --ip&lt;span class="o"&gt;=&lt;/span&gt;192.168.10.1 --work_dir&lt;span class="o"&gt;=&lt;/span&gt;/var/lib/mesos --cluster&lt;span class="o"&gt;=&lt;/span&gt;MotionLogic
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On each slave, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo ./bin/mesos-slave.sh --master&lt;span class="o"&gt;=&lt;/span&gt;192.168.10.1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On the master we can open the web interface at &lt;a class="reference external" href="http://192.168.10.1:5050"&gt;http://192.168.10.1:5050&lt;/a&gt; and see that two slaves have connected.
Plenty of output is provided on the terminal to troubleshoot any issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update"&gt;
&lt;h2&gt;Update&lt;/h2&gt;
&lt;p&gt;In researching &lt;a class="reference external" href="https://aurora.apache.org/"&gt;Apache Aurora&lt;/a&gt; I came across CentOS 7 rpms for current Mesos versions provided by &lt;a class="reference external" href="https://mesosphere.com/"&gt;Mesosphere&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://aurora.apache.org/documentation/latest/installing/#mesos-on-centos-7"&gt;http://aurora.apache.org/documentation/latest/installing/#mesos-on-centos-7&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo rpm -Uvh http://repos.mesosphere.io/el/7/noarch/RPMS/mesosphere-el-repo-7-1.noarch.rpm
sudo yum repository-packages mesosphere list
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="ops"></category><category term="CentOS"></category><category term="mesos"></category></entry><entry><title>Advent of Code 2015</title><link href="https://twopercent.github.io/advent-of-code-2015.html" rel="alternate"></link><published>2015-12-10T16:10:00-06:00</published><updated>2015-12-10T16:10:00-06:00</updated><author><name>Chris Moser</name></author><id>tag:twopercent.github.io,2015-12-10:advent-of-code-2015.html</id><summary type="html">&lt;p&gt;I came across the &lt;a href="http://adventofcode.com/"&gt;Advent of Code&lt;/a&gt; website after I saw someone create a repository on github to store their solutions.
It was created by &lt;a href="http://was.tl/"&gt;Eric Wastl&lt;/a&gt; and allows you to complete programming challenges each day in whatever language you choose.
This is a nice approach as you don't have to worry about an online interpreter missing some modules that you have locally.&lt;/p&gt;
&lt;p&gt;I have put my solutions so far on &lt;a href="https://github.com/twopercent/advent_2015"&gt;github&lt;/a&gt;&lt;/p&gt;</summary><category term="dev"></category><category term="python"></category></entry><entry><title>Salt Stack and BOINC</title><link href="https://twopercent.github.io/salt-stack-and-boinc.html" rel="alternate"></link><published>2015-11-11T15:54:00-06:00</published><updated>2015-11-11T15:54:00-06:00</updated><author><name>Chris Moser</name></author><id>tag:twopercent.github.io,2015-11-11:salt-stack-and-boinc.html</id><summary type="html">&lt;div class="section" id="initial-setup"&gt;
&lt;h2&gt;Initial Setup&lt;/h2&gt;
&lt;p&gt;Now that we have some hardware and Salt Stack running, lets create a state file and put the minions to work.
I am going to use &lt;a class="reference external" href="http://boinc.berkeley.edu/"&gt;BOINC&lt;/a&gt; to stress the CPU's.&lt;/p&gt;
&lt;p&gt;The only boinc packages for CentOS 7 listed on &lt;a class="reference external" href="http://pkgs.org/"&gt;pkgs.org&lt;/a&gt; just moved out of epel-testing into epel after I completed my build.
They would be a good resource for a future configuration.&lt;/p&gt;
&lt;p&gt;I downloaded the source and compiled boinc with the default options on my head node.
I attached to &lt;a class="reference external" href="http://www.worldcommunitygrid.org/"&gt;World Community Grid&lt;/a&gt; with the boinccmd tool supplying the project URL and my account key.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;boinccmd --project_attach www.worldcommunitygrid.org 122244_6d39631909f6dbc9491c34478ff24806
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I don't intend to continue running BOINC on the salt master but wanted to make sure installaition worked and create an account file to supply to the minions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="salt-state"&gt;
&lt;h2&gt;Salt State&lt;/h2&gt;
&lt;p&gt;Now we should be able to create a salt state file, serve the boinc binaries and configuration files to the minions, and apply the state.
The salt master puts files in /srv/salt by default.
I created /src/salt/boinc to make things a little cleaner.
It includes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;account_www.worldcommunitygrid.org.xml
boinc
boinc-client_init.d
boinc-client_sysconfig
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The xml file was created when I attached to a project on the salt master and when copied to anohter host will instruct BOINC to request work from the same project.
The boinc directory includes the compiled boinc application.
The boinc-client files are a startup script to be placed in /etc/init.d and a configuration file to be placed in /etc/sysconfig&lt;/p&gt;
&lt;p&gt;In /srv/salt I also keep the boinc.sls state file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;boinc:
  user.present:
    - home: /home/boinc

/home/boinc/boinc/:
  file.recurse:
    - source: salt://boinc/boinc
    - user: boinc
    - group: boinc
    - clean: True

/home/boinc/boinc/client/boinc_client:
    file.managed:
      - source: salt://boinc/boinc/client/boinc_client
      - user: boinc
      - group: boinc
      - mode: 775

/home/boinc/boinc/client/boinc:
  file.managed:
    - source: salt://boinc/boinc/client/boinc
    - user: boinc
    - group: boinc
    - mode: 775

/home/boinc/boinc/client/boinccmd:
  file.managed:
    - source: salt://boinc/boinc/client/boinccmd
    - user: boinc
    - group: boinc
    - mode: 775

/home/boinc/boinc/client/switcher:
  file.managed:
    - source: salt://boinc/boinc/client/switcher
    - user: boinc
    - group: boinc
    - mode: 775

/home/boinc/boinc/client/build_po:
  file.managed:
    - source: salt://boinc/boinc/client/build_po
    - user: boinc
    - group: boinc
    - mode: 775

/home/boinc/account_www.worldcommunitygrid.org.xml:
  file.managed:
    - source: salt://boinc/account_www.worldcommunitygrid.org.xml
    - user: boinc
    - group: boinc
    - mode: 664

/etc/init.d/boinc-client:
  file.managed:
    - source: salt://boinc/boinc-client_init.d
    - user: root
    - group: root
    - mode: 755

/etc/sysconfig/boinc-client:
  file.managed:
    - source: salt://boinc/boinc-client_sysconfig
    - user: root
    - group: root
    - mode: 755

start boinc:
  service.running:
    - name: boinc-client
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first statement tells salt to create a boinc user with the default home directory location.
Next we copy the boinc folder with the compiled boinc application to the boinc users newly created home directory.
Salt does not maintain the owner and permissions of files when copying with the &amp;quot;file.recurse&amp;quot; function so the next 5 statements verify these key binaries are executable.
We copy the account information file to the root of the boinc user home directory, the init script to /etc/init.d and the config file to /etc/sysconfig
Finally, the &amp;quot;start boinc&amp;quot; state verifes that the boinc service is running.&lt;/p&gt;
&lt;p&gt;I want boinc to run on all my minions currently so we apply the state file with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; state.apply boinc
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="next-steps"&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;Now that a boinc-client package is available in EPEL, it would probably be cleaner to use that.
Another option would be to use the &lt;a class="reference external" href="https://github.com/BOINC/boinc"&gt;BOINC github repository&lt;/a&gt;.
We could configure salt to pull, complile, and install the latest verion on each minion every time there is an update.&lt;/p&gt;
&lt;img alt="" src="http://www.worldcommunitygrid.org/getDynamicImage.do?memberName=c_moser&amp;amp;mnOn=false&amp;amp;stat=1&amp;amp;imageNum=1&amp;amp;rankOn=true&amp;amp;projectsOn=true&amp;amp;special=true" /&gt;
&lt;img alt="" src="wcg_stats.png" /&gt;
&lt;/div&gt;
</summary><category term="ops"></category><category term="saltstack"></category><category term="BOINC"></category></entry><entry><title>PXE Server Part 2 and Salt Stack</title><link href="https://twopercent.github.io/pxe-server-part-2-and-salt-stack.html" rel="alternate"></link><published>2015-11-05T12:18:00-06:00</published><updated>2015-11-05T12:18:00-06:00</updated><author><name>Chris Moser</name></author><id>tag:twopercent.github.io,2015-11-05:pxe-server-part-2-and-salt-stack.html</id><summary type="html">&lt;div class="section" id="minions-assemble"&gt;
&lt;h2&gt;Minions, Assemble!&lt;/h2&gt;
&lt;p&gt;I built a few CentOS hosts with the PXE server I created in a &lt;a class="reference external" href="http://twopercent.github.io/pxe-server-part-1.html"&gt;previous post&lt;/a&gt;.
I used a kickstart file to install 'minimal server' so the installations could be unattended.
After each host was installed, I manually set a hostname and static IP address.
This would not be feasible for a large deployment and there are a number of options available to set a unique hostname.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Kickstart can variables placed in the kernel options line of the syslinux installer. --&amp;gt; &lt;a class="reference external" href="http://monzell.com/post/15547967527/automatically-set-the-hostname-during-kickstart/"&gt;monzell.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Generate a randome hostname in the kickstart %pre section and then set it in the main section. --&amp;gt; &lt;a class="reference external" href="http://minuteware.net/2012-10-18-random-hostname-for-centos-kickstart-installation.html/"&gt;minuteware.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Modify your syslinux.cfg file between each build to pass a new hostname to the kickstart file via a kernel option.&lt;/li&gt;
&lt;li&gt;Generate a unique kickstart file for each build.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As our end goal is wrangle these machines with &lt;a class="reference external" href="http://saltstack.com/"&gt;salt stack&lt;/a&gt; it is a good idea to have kickstart install the salt-minion client as well.
I used the bootstrap installer script by adding the following lines to the %post section of my kickstart file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -L https://bootstrap.saltstack.com -o install_salt.sh
sudo sh install_salt.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You could also install the salt-minion package from EPEL.
Download the package to your PXE server, use createrepo to update your repository metadata, and add &amp;quot;salt-minion&amp;quot; to the %packages section of your kickstart file.
Alternatively you could add the EPEL repository and install the salt-minion package in the %post section of your kickstart file.&lt;/p&gt;
&lt;p&gt;I don't have any DNS set up in my test environment so I added a line to the host file so the salt-minion client would find the master with the name &amp;quot;salt&amp;quot;.
This is also in %post.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;IP_of_SaltMaster&amp;gt; salt&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-salt-master"&gt;
&lt;h2&gt;The Salt Master&lt;/h2&gt;
&lt;p&gt;I installed the salt master on my PXE server with the same bootstrap script by passing the -M flag.
&lt;a class="reference external" href="https://docs.saltstack.com/en/getstarted/fundamentals/install.html#"&gt;docs.saltstack.com&lt;/a&gt; details the installtion.&lt;/p&gt;
&lt;p&gt;The salt minions will continuously try to reach the salt master so the order of events shouldn't matter here.
Check for incomming connections on the master with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt-key --list-all
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I found nothing and remembered the firewall was probably blocking the connections.
Add the file &amp;quot;salt-master.xml&amp;quot; to /etc/firewalld/services with the following content.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;?xml &lt;span class="nv"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;?&amp;gt;
&amp;lt;service&amp;gt;
  &amp;lt;short&amp;gt;salt-master&amp;lt;/short&amp;gt;
  &amp;lt;description&amp;gt;TCP port &lt;span class="m"&gt;4505&lt;/span&gt; and &lt;span class="m"&gt;4506&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; salt stack&amp;lt;/description&amp;gt;
  &amp;lt;port &lt;span class="nv"&gt;protocol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tcp&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;4505&amp;quot;&lt;/span&gt;/&amp;gt;
  &amp;lt;port &lt;span class="nv"&gt;protocol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tcp&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;4506&amp;quot;&lt;/span&gt;/&amp;gt;
&amp;lt;/service&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reload the firewall to find the new rule, add it, and reload again to activate it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo firewall-cmd --reload
sudo firewall-cmd --permanent --add-service&lt;span class="o"&gt;=&lt;/span&gt;salt-master
sudo firewall-cmd --reload
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you still don't see minions with &amp;quot;salt-key --list-all&amp;quot; you can check the /var/log/salt/minion file on the minions for possible issues.
Finally, add the minions on the master and run a test command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt-key --accept-all
salt &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; test.ping
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="ops"></category><category term="saltstack"></category><category term="firewalld"></category><category term="kickstart"></category></entry><entry><title>Metro Transit CLI Bus Locations</title><link href="https://twopercent.github.io/metro-transit-cli-bus-locations.html" rel="alternate"></link><published>2015-10-20T16:37:00-05:00</published><updated>2015-10-20T16:37:00-05:00</updated><author><name>Chris Moser</name></author><id>tag:twopercent.github.io,2015-10-20:metro-transit-cli-bus-locations.html</id><summary type="html">&lt;p&gt;Continuing with the mtcli package, I added busloc.py which will display the locations of vehicles on a specified route.
There are two main functions, getLocations(busNum) and openMap(busLocations).&lt;/p&gt;
&lt;p&gt;First the user is prompted for a bus number.
A call is made to the metro transit API to return an array of arrays of information about all the vehicles currently active on that route.
Two of the attributes of interest are the latitude and longitude.
I build a GeoJSON MultiPoint array of the GPS coordinates of each vehicle.
More info on the GeoJSON format can be foud &lt;a class="reference external" href="http://geojson.org"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was recommended to a great resource in &lt;a class="reference external" href="http://geojson.io"&gt;GeoJSON.io&lt;/a&gt; to display the locations on map in a browser.
You can upload data in many forms to geojson.io or point it to an online datasets.
Since I wanted a fluid experience with my application I chose to encode the coordinate data into the URL used to request the site.
I used the urllib.parse.quote module to replace special characters in the coordinate data using %xx escape format.
Finally webbrowser.open_new_tab(url) is called to open geojson.org with the location data.&lt;/p&gt;
&lt;p&gt;Metro Transit allows you to specity &amp;quot;0&amp;quot; as a route number and it will return data on all vehicles currently in operation.&lt;/p&gt;
&lt;p&gt;I am thinking about ways to combine mtcli.py and busloc.py into a single application.&lt;/p&gt;
&lt;p&gt;All Metro Transit vehicles in operation at 16:00 on a Tuesday&lt;/p&gt;
&lt;img alt="bus location image" src="metro_transit.png" /&gt;
</summary><category term="python"></category><category term="dev"></category><category term="maps"></category></entry><entry><title>IRQ 70: nobody cared</title><link href="https://twopercent.github.io/irq-70-nobody-cared.html" rel="alternate"></link><published>2015-10-15T15:15:00-05:00</published><updated>2015-10-15T15:15:00-05:00</updated><author><name>Chris Moser</name></author><id>tag:twopercent.github.io,2015-10-15:irq-70-nobody-cared.html</id><summary type="html">&lt;p&gt;Nagios reported one of our &lt;a class="reference external" href="http://www.rocksclusters.org/"&gt;Rocks&lt;/a&gt; clusters lost all of its compute nodes.
A Rocks head node typically has two or more network interfaces.
One for public access to the cluster and another for a private network of compute nodes.
Since I had a local technician on chat, I asked him to check the switch of the cluster network.
It is a un-managed switch and a failure would cause this sympton.
He reported it looked operational so I checked the logs and found this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tesla kernel: irq 70: nobody cared &lt;span class="o"&gt;(&lt;/span&gt;try booting with the &lt;span class="s2"&gt;&amp;quot;irqpoll&amp;quot;&lt;/span&gt; option&lt;span class="o"&gt;)&lt;/span&gt;
tesla kernel: Pid: 0, comm: swapper Tainted: G        W  ---------------    2.6.32-504.16.2.el6.x86_64 &lt;span class="c1"&gt;#1&lt;/span&gt;
tesla kernel: Call Trace:
tesla kernel: &amp;lt;IRQ&amp;gt;  &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;ffffffff810eccab&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; ? __report_bad_irq+0x2b/0xa0
tesla kernel: &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;ffffffff810eceac&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; ? note_interrupt+0x18c/0x1d0
tesla kernel: &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;ffffffff810ed4f5&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; ? handle_edge_irq+0xf5/0x180
tesla kernel: &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;ffffffff8100fbd9&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; ? handle_irq+0x49/0xa0
tesla kernel: &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;ffffffff81533f9c&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; ? do_IRQ+0x6c/0xf0
tesla kernel: &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;ffffffff8100b9d3&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; ? ret_from_intr+0x0/0x11
tesla kernel: &amp;lt;EOI&amp;gt;  &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;ffffffff81425f31&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; ? poll_idle+0x41/0x80
tesla kernel: &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;ffffffff81425f03&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; ? poll_idle+0x13/0x80
tesla kernel: &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;ffffffff81426117&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; ? cpuidle_idle_call+0xa7/0x140
tesla kernel: &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;ffffffff81009fc6&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; ? cpu_idle+0xb6/0x110
tesla kernel: &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;ffffffff8152328d&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; ? start_secondary+0x2be/0x301
tesla kernel: handlers:
tesla kernel: &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;ffffffffa0164fe0&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;e1000_msix_other+0x0/0x130 &lt;span class="o"&gt;[&lt;/span&gt;e1000e&lt;span class="o"&gt;])&lt;/span&gt;
tesla kernel: Disabling IRQ &lt;span class="c1"&gt;#70&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;/proc/interrupts and lspci confirmed irq 70 was addigned to one of the Intel 82574L Gigabit Ethernet adapters and the e1000e kernel module was in place to control this hardware.
The log messages seem to indicate the the network adapter was sending an interrupt request that the e1000e module was not handling.
The kernel decided this is not good and disabled the irq channel and none of properly formed requests are handled.
Restarting the network service resolved the symptom.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo service network restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After the issue arose again, I determined we needed to look for the cause.
This &lt;a class="reference external" href="http://ehc.ac/p/e1000/bugs/360/"&gt;bug report&lt;/a&gt; seemed relevant.
It appears there may be a hardware issue with this particular adapter.
I decided to attempt the module option declaration suggested.&lt;/p&gt;
&lt;p&gt;I created the /etc/modprobe.d/e1000e.conf file witht the following line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;options e1000e &lt;span class="nv"&gt;IntMode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1,1,1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Three 1's because I have three adapters.
The module options are only read when the module is loaded and I have to bring down the network to reload the module.
I have IPMI baseboard management access to do this.
Stopping the network service while using secure shell, remote shell, telnet, or and other remote tool will terminate your connection and you will need console access to continue.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo service network stop
sudo rmmod e1000e
sudo modprobe e1000e
sudo service network start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A note in /var/log/messages tells me the option was parsed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tesla kernel: e1000e 0000:04:00.0: Interrupt Mode &lt;span class="nb"&gt;set&lt;/span&gt; to 1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It has been a week and there have been no more errors.&lt;/p&gt;
</summary><category term="ops"></category><category term="centos"></category><category term="ROCKS"></category></entry><entry><title>PXE Server Part 1</title><link href="https://twopercent.github.io/pxe-server-part-1.html" rel="alternate"></link><published>2015-10-09T13:00:00-05:00</published><updated>2015-10-09T13:00:00-05:00</updated><author><name>Chris Moser</name></author><id>tag:twopercent.github.io,2015-10-09:pxe-server-part-1.html</id><summary type="html">&lt;p&gt;Let's set up a test environment for development and operations related projects.
I have a number of rack mounted machines at my disposal so I will set up a PXE boot enviroment to provision my physical hosts.
I will start with a wiki article from &lt;a class="reference external" href="https://wiki.centos.org/HowTos/PXE/PXE_Setup/"&gt;CentOS HowTos&lt;/a&gt;.
You can tell if is from an older verision of CentOS because of CentOS 3, 4, and 5 images they use.&lt;/p&gt;
&lt;p&gt;I started with minimal install of CentOS 7. I installed and configured tftp-server and syslinux as described.
/usr/lib/syslinux does not exist and must have been moved since this how-to was created.
We can use rpm to find the syslinux files we are looking for:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rpm -ql syslinux &lt;span class="p"&gt;|&lt;/span&gt;grep pxelinx.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;/tftpboot also does not exist.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rpm -ql tftp-server &lt;span class="p"&gt;|&lt;/span&gt;grep tftpboot
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I copied the required files from /usr/share/syslinux to /var/lib/tftpboot.
The kernel and initial ramdisk images needed can be found after the next step.
The how-to gives different locations for the syslinux images in your tftpboot tree and PXE Menu file, make sure yours are the same.
My pxelinux.cfg/default file looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;default menu.c32
prompt 0
timeout 300
ONTIMEOUT &lt;span class="nb"&gt;local&lt;/span&gt;

MENU TITLE Cluster Lab PXE Menu

LABEL CentOS &lt;span class="m"&gt;7&lt;/span&gt; Interactive
    MENU LABEL CentOS &lt;span class="m"&gt;7&lt;/span&gt; Interactive
    KERNEL images/centos/7/x86_64/pxeboot/vmlinuz
    APPEND &lt;span class="nv"&gt;initrd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;images/centos/7/x86_64/pxeboot/initrd.img inst.repo&lt;span class="o"&gt;=&lt;/span&gt;http://192.168.10.1/centos/7/os/x86_64

LABEL CentOS &lt;span class="m"&gt;7&lt;/span&gt; KS Minimal
    MENU LABEL CentOS &lt;span class="m"&gt;7&lt;/span&gt; KS Minimal
    KERNEL images/centos/7/x86_64/pxeboot/vmlinuz
    APPEND &lt;span class="nv"&gt;initrd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;images/centos/7/x86_64/pxeboot/initrd.img inst.repo&lt;span class="o"&gt;=&lt;/span&gt;http://192.168.10.1/centos/7/os/x86_64 &lt;span class="nv"&gt;ks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http://192.168.10.1/kickstart/centos7_minimal.ks
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of using vsftpd I went with httpd.
I copied the CentOS 7 DVD to the /var/www/html/centos/7/os/x86_64 directory.&lt;/p&gt;
&lt;p&gt;The dhcpd.conf file seems to be dated as well.
Take a look at the example file located at /usr/share/doc/dhcp*/dhcpd.conf.example.
I added next-server and filename declarations from the how-to that aren't specified in the example file.
Use sudo journalctl -xn 30 if the dhcp daemon fails to start.
If you don't specity 30 lines, 10 will be given and the useful information will be missing.&lt;/p&gt;
&lt;p&gt;I estimate 50% of linux tutorials cop out with a statement like &amp;quot;Disable the firewall and SELinux&amp;quot; at the start.
This is unfortunate, but understandable as iptables takes some getting used to.
Things are a little easier in CentOS 7 with firewalld.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;firewall-cmd --get-services
sudo firewall-cmd --permanent --add-service&lt;span class="o"&gt;=&lt;/span&gt;dhcp --add-service&lt;span class="o"&gt;=&lt;/span&gt;ftp --add-service&lt;span class="o"&gt;=&lt;/span&gt;http
sudo firewall-cmd --reload
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check your work with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;firewall-cmd --list-services
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now boot one of your client machines and select PXE boot. If all went well you should be greeted with the PXE menu you created.
Depending on if you confiugred a kickstart file in your PXE menu or opted for a manual install, proceed with installation.&lt;/p&gt;
</summary><category term="ops"></category><category term="centos"></category><category term="fierwalld"></category><category term="kickstart"></category></entry><entry><title>Metro Transit CLI</title><link href="https://twopercent.github.io/metro-transit-cli.html" rel="alternate"></link><published>2015-09-22T16:26:00-05:00</published><updated>2015-09-22T16:26:00-05:00</updated><author><name>Chris Moser</name></author><id>tag:twopercent.github.io,2015-09-22:metro-transit-cli.html</id><summary type="html">
        &lt;a href="http://www.metrotransit.org"&gt;Metro Transit&lt;/a&gt; is the main transit operator in the twin cities. 
        They have a fine website but a little too much clicking is required to find out when the next bus is going to roll by. 
        I found the &lt;a href="http://svc.metrotransit.org" /&gt;Metro Transit web services&lt;/a&gt; page to be just what I needed. 
        &lt;br&gt;&lt;br&gt;
        I wrote three functions to request the applicable directions of a specific route, the time stops on a route, and the next arrivals at a time stop. 
        There is also some logic to present the user with the results of each query and enter input to craft the next request. 
        I used &lt;code&gt;urllib.request&lt;/code&gt; and &lt;code&gt;xml.etree.ElementTree&lt;/code&gt; from the python 3.4 standard library. 
        &lt;br&gt;&lt;br&gt;
        First the user is prompted for a route number and a call is made to the API to return the directions, either North - South or East - West, of that route. 
        The data is returned in XML format as an array of text value pairs, the direction and a direcion code.
        ElementTree is used to parse them. 
        I load the data into a list of lists so that I can display the options with a &lt;code&gt;0.&lt;/code&gt; and &lt;code&gt;1.&lt;/code&gt; identifier. 
        The users input is used to select the index of the parent list, taking the first index of the child list, which is the direction code. 
        &lt;br&gt;&lt;br&gt;
        The direction code is used alond with the bus number to craft the next API call.  
        An array of pairs is again returned. 
        Time stops and a four character stop code are returned in order of the direction that was specified. 
        A list of lists is again created and the users is promtped for a seletion. 
        &lt;br&gt;&lt;br&gt;
        The final call combines the route number, the direction of travel and the time stop location. 
        A collection of "NexTripDeparture" are returned which contain information about the next vehicles scheduled to stop at the requested location. 
        I print the arrival time, bus number, route description, and a "BlockNumber" designator for the vehicle. (maybe a bus number) 
        &lt;br&gt;&lt;br&gt;
        The code is on &lt;a href="https://github.com/twopercent/mtcli"&gt;GitHub&lt;/a&gt;.  
        &lt;br&gt;&lt;br&gt;
        Use git clone to clone is locally: 
        &lt;br&gt;
        &lt;code&gt;git clone https://github.com/twopercent/mtcli&lt;/code&gt;
        &lt;br&gt;&lt;br&gt;
        Some more work can be done to pull out the XML parsing from the API call functions as it is very simiar in all three. 
    </summary><category term="python"></category><category term="REST"></category><category term="dev"></category></entry></feed>